# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '../hello.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from os import times
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import random
import time
import sys
import datetime

class verb:
        def __init__(self,*data):
                self.id               = None
                self.ru_verb          = None
                self.ru_complete_verb = None
                self.en_complete_verb = None
                self.point            = None
                self.last_date        = None
                if len(data)<6:
                        self.get()
                else:
                        self.id               = data[0]
                        self.ru_verb          = data[1]
                        self.ru_complete_verb = data[2]
                        self.en_complete_verb = data[3]
                        self.point            = data[4]
                        self.last_date        = data[5]

        def get(self):
                con = sqlite3.connect("verbs.db")
                cur = con.cursor()
                sql = "select * from verbs where point<100 and cast(julianday('now')-julianday(last_time) as INTEGER)>=6 limit 50"
                try:
                        data = cur.execute(sql).fetchall()
                        con.commit()
                        index = random.randint(0,len(data))
                        data = data[index]
                        self.id               = data[0]
                        self.ru_verb          = data[1]
                        self.ru_complete_verb = data[2]
                        self.en_complete_verb = data[3]
                        self.point            = data[4]
                        self.last_date        = data[5]

                except sqlite3.Error:
                        self.id               = ""
                        self.ru_verb          = ""
                        self.ru_complete_verb = ""
                        self.en_complete_verb = ""
                        self.point            = ""
                        self.last_date   
                finally:     
                        cur.close()
                        con.close()

                return self
        def update(self):
                sql = f"""update verbs set ru_verb='{self.ru_verb}',
                                       ru_verb_complete='{self.ru_complete_verb}',
                                       en_verb_complete='{self.en_complete_verb}',
                                       point='{self.point}',
                                       last_time='{str(datetime.datetime.now())[:10]}' 
                                       where id='{self.id}'"""
                con = sqlite3.connect("verbs.db")
                cur = con.cursor()
                try:
                        data = cur.execute(sql)
                        con.commit()
                except sqlite3.Error:
                        pass        
                cur.close()
                con.close()

class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(380, 241)
                MainWindow.setStyleSheet("color:white;\n"
        "background-color: rgb(61, 56, 70);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.widget = QtWidgets.QWidget(self.centralwidget)
                self.widget.setGeometry(QtCore.QRect(10, 20, 361, 171))
                self.widget.setObjectName("widget")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
                self.verticalLayout.setContentsMargins(0, 0, 0, 0)
                self.verticalLayout.setObjectName("verticalLayout")
                self.ru_verb = QtWidgets.QLabel(self.widget)
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.ru_verb.setFont(font)
                self.ru_verb.setStyleSheet("background-color: rgb(153, 193, 241);\n"
        "border-radius: 10px;")
                self.ru_verb.setAlignment(QtCore.Qt.AlignCenter)
                self.ru_verb.setObjectName("ru_verb")
                self.verticalLayout.addWidget(self.ru_verb)
                self.ru_verb_complete = QtWidgets.QLabel(self.widget)
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.ru_verb_complete.setFont(font)
                self.ru_verb_complete.setStyleSheet("background-color: rgb(249, 240, 107);\n"
        "border-radius:10px;")
                self.ru_verb_complete.setAlignment(QtCore.Qt.AlignCenter)
                self.ru_verb_complete.setObjectName("ru_verb_complete")
                self.verticalLayout.addWidget(self.ru_verb_complete)
                self.en_verb_complete = QtWidgets.QLabel(self.widget)
                font = QtGui.QFont()
                font.setPointSize(14)
                font.setBold(True)
                font.setWeight(75)
                self.en_verb_complete.setFont(font)
                self.en_verb_complete.setStyleSheet("background-color: rgb(246, 97, 81);\n"
        "border-radius:10px;")
                self.en_verb_complete.setAlignment(QtCore.Qt.AlignCenter)
                self.en_verb_complete.setObjectName("en_verb_complete")
                self.verticalLayout.addWidget(self.en_verb_complete)
                self.widget1 = QtWidgets.QWidget(self.centralwidget)
                self.widget1.setGeometry(QtCore.QRect(10, 200, 361, 29))
                self.widget1.setObjectName("widget1")
                self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget1)
                self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.answer = QtWidgets.QLineEdit(self.widget1)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.answer.sizePolicy().hasHeightForWidth())
                self.answer.setSizePolicy(sizePolicy)
                self.answer.setStyleSheet("background-color: rgb(154, 153, 150);\n"
        "border-radius:5px;")
                self.answer.setObjectName("answer")
                self.horizontalLayout.addWidget(self.answer)
                self.submit = QtWidgets.QPushButton(self.widget1)
                self.submit.setStyleSheet("background-color: rgb(46, 194, 126);\n"
                                                                "color:white;")
                self.submit.setObjectName("submit")
                self.horizontalLayout.addWidget(self.submit)
                MainWindow.setCentralWidget(self.centralwidget)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.ru_verb.setText(_translate("MainWindow", "TextLabel"))
                self.ru_verb_complete.setText(_translate("MainWindow", "TextLabel"))
                self.en_verb_complete.setText(_translate("MainWindow", "TextLabel"))
                self.submit.setText(_translate("MainWindow", "X"))
                self.verb = None
                self.submit.clicked.connect(self.clear)
                self.answer.returnPressed.connect(self.clicked_submit)
                self.init()

        def clear(self):
                self.answer.clear()

        def clicked_submit(self):
                answer = self.answer.text()
                if self.check(answer):
                        self.verb.point = int(self.verb.point)+10
                        print(self.verb.point)
                        self.verb.last_date = str(datetime.datetime.now())[:10]
                        self.verb.update()
                        self.clear()
                        self.init()
                        
                else:
                        self.en_verb_complete.setText("/".join(self.verb.en_complete_verb.lower().strip().split(",")))
                        for i in range(3):
                                time.sleep(1)    
                        self.init()
                        self.clear()
        def check(self,answer):
                return answer in str(self.verb.en_complete_verb).split(",")

        def fill_controlls(self,ru:str="",ru_1:str="",en:str=""):
                self.ru_verb.setText(ru)
                self.ru_verb_complete.setText(ru_1)
                self.en_verb_complete.setText(en)

        def init(self):
                
                self.verb = verb()
                ru_0=self.verb.ru_verb
                ru_1 = " / ".join(self.verb.ru_complete_verb.split(";"))
                en_0=" / ".join(self.verb.en_complete_verb.split("/"))
                if int(self.verb.point)<10:
                        self.fill_controlls(ru_0,ru_1,en_0)
                else:
                        self.fill_controlls(ru_0,ru_1,"")#en_0)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
